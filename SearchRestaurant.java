package view;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import controller.Constantes;
import controller.FileUtils;
import model.ClienteBase;
import model.Restaurante;
import model.UsuarioBase;

import java.awt.event.ItemEvent;
import java.io.Serial;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 * @author hol
 */
public class SearchRestaurant extends javax.swing.JFrame {

    @Serial
    private static final long serialVersionUID = 3431622537920185446L;

    /**
     * Creates new form Filtro_Cliente_Part
     */
    public SearchRestaurant() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButtonLogout = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableRestaurantes = new javax.swing.JTable();
        jComboBoxEspecialidad = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldCP = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Especialidad:");

        jButtonLogout.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButtonLogout.setText("Cerrar Sesi√≥n");
        jButtonLogout.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.white, null, null));
        jButtonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLogoutActionPerformed(evt);
            }
        });

        jTableRestaurantes.setAutoCreateRowSorter(true);
        jTableRestaurantes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableRestaurantes.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTableRestaurantesCargarDatos(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jTableRestaurantes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableRestaurantesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableRestaurantes);

        // Cargar a partir de enum especialidades de Restaurante
        ArrayList<String> especialidades = new ArrayList<>();
        especialidades.add("TODAS");
        for (Restaurante.Especialidad especialidad : Restaurante.Especialidad.values()) {
            especialidades.add(especialidad.toString());
        }
        jComboBoxEspecialidad.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jComboBoxEspecialidad.setModel(new javax.swing.DefaultComboBoxModel<>(especialidades.toArray(new String[0])));
        jComboBoxEspecialidad.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxFiltrarTabla(evt);
            }
        });

        jLabel2.setText("Mi CP:");

        jTextFieldCP.setEditable(false);
        jTextFieldCP.setForeground(new java.awt.Color(153, 153, 153));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldCP, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 183, Short.MAX_VALUE)
                        .addComponent(jButtonLogout)))
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonLogout))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLogoutActionPerformed
        Login login = new Login();
        login.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButtonLogoutActionPerformed

    private void jComboBoxFiltrarTabla(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxFiltrarTabla
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            String especialidad = (String) jComboBoxEspecialidad.getSelectedItem();
            cargarDatosTabla(especialidad);
        }
    }//GEN-LAST:event_jComboBoxFiltrarTabla

    private void jTableRestaurantesCargarDatos(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTableRestaurantesCargarDatos

    }//GEN-LAST:event_jTableRestaurantesCargarDatos

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        UsuarioBase.Rol rol = Constantes.USUARIO_ACTUAL.getRol();
        String cp = ((ClienteBase) Constantes.USUARIO_ACTUAL).getDireccion().getCodigoPostal();
        jTextFieldCP.setText(cp);
        cargarDatosTabla("TODAS");
    }//GEN-LAST:event_formWindowOpened

    private void jTableRestaurantesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableRestaurantesMouseClicked
        // obtener cif del restaurante seleccionado
        int row = jTableRestaurantes.rowAtPoint(evt.getPoint());
        String cif = jTableRestaurantes.getModel().getValueAt(row, 0).toString();
        Cliente_comida_lista cliente_comida_lista = new Cliente_comida_lista();
        cliente_comida_lista.rellenarDatos(cif);
        cliente_comida_lista.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jTableRestaurantesMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchRestaurant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchRestaurant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchRestaurant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchRestaurant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchRestaurant().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLogout;
    private javax.swing.JComboBox<String> jComboBoxEspecialidad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableRestaurantes;
    private javax.swing.JTextField jTextFieldCP;
    // End of variables declaration//GEN-END:variables

    private void cargarDatosTabla(String especialidad) {
        DefaultTableModel modelo = new DefaultTableModel() {
            @Serial
            private static final long serialVersionUID = -4370597475861961840L;

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        modelo.addColumn("CIF");
        modelo.addColumn("Nombre");
        modelo.addColumn("Especialidad");
        modelo.addColumn("Calificaci√≥n");
        modelo.addColumn("Tiempo Env√≠o");
        modelo.addColumn("CP");
        modelo.addColumn("Catering");
        // cargar datos
        ArrayList<Restaurante> restaurantes = (ArrayList<Restaurante>) FileUtils.readFromFile(Constantes.PATH_RESTAURANTS);
        // 4 primeros caracteres del cp del cliente
        String inicioCPCliente = jTextFieldCP.getText().substring(0, 4);
        // a√±adimos todos los restaurantes a la tabla
        for (Restaurante restaurante : restaurantes) {
            String especialidadRest = restaurante.getEspecialidad().toString();
            String inicioCPRestaurante = restaurante.getDireccion().getCodigoPostal().substring(0, 4);
            if (!restaurante.estaDeBaja()) { // Filtra los restaurantes que no est√©n de baja
                if (inicioCPRestaurante.equals(inicioCPCliente)) { // Filtra por el cp que tiene los 4 primeros d√≠gitos iguales
                    if (especialidad.equals("TODAS") || especialidad.equals(especialidadRest)) { // Filtra por especialidad
                        // A√±adir estrellas
                        String estrellas = restaurante.getCalificacionMediaEstrellas();

                        // A√±adir catering
                        String catering = "No";
                        if (restaurante.hayCatering()) catering = "S√≠";

                        modelo.addRow(new Object[]{
                                restaurante.getCif(),
                                restaurante.getNombre(), restaurante.getEspecialidad(),
                                estrellas, restaurante.getTiempoMedio(),
                                restaurante.getDireccion().getCodigoPostal(), catering
                        });
                    }
                }
            }
        }
        jTableRestaurantes.setModel(modelo);
        jTableRestaurantes.removeColumn(jTableRestaurantes.getColumnModel().getColumn(0));
    }
}
