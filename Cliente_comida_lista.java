/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.Constantes;
import controller.FileUtils;
import model.*;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Serial;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 * @author Carlos Campos
 */
public class Cliente_comida_lista extends javax.swing.JFrame {

    @Serial
    private static final long serialVersionUID = 8203076931242317264L;

    private Restaurante restaurante = null;
    
    public void rellenarDatos(String cif) {
        // leer el archivo de restaurantes
        ArrayList<Restaurante> restaurantes = (ArrayList<Restaurante>) FileUtils.readFromFile(Constantes.PATH_RESTAURANTS);
        // buscar el restaurante

        for (Restaurante r : restaurantes) {
            if (r.getCif().equals(cif)) {
                restaurante = r;
                break;
            }
        }
        // rellenar los campos
        jLabelNombre.setText(restaurante.getNombre());
        //jSpinnerCalificacion.setValue(restaurante.getCalificacionMediaEstrellas());
        jTextFieldGastosEnvio.setText(String.valueOf(restaurante.getGastosEnvio()));
        jTextFieldTiempoMedio.setText(String.valueOf(restaurante.getTiempoMedio()));
    }

    /**
     * Creates new form Admin_1_restaurante_Modificaciones
     */
    public Cliente_comida_lista() {
        initComponents();
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cliente_comida_lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cliente_comida_lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cliente_comida_lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cliente_comida_lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelNombre = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldGastosEnvio = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldTiempoMedio = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableComidas = new javax.swing.JTable();
        jButtonPagar = new javax.swing.JButton();
        jButtonAtras = new javax.swing.JButton();
        jButtonAddToCart = new javax.swing.JButton();
        jButtonDeleteFromCart = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCarrito = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldTotal = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldTotalConEnvio = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelNombre.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabelNombre.setText("Restaurante");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setText("Gastos de envío:");

        jTextFieldGastosEnvio.setEditable(false);
        jTextFieldGastosEnvio.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextFieldGastosEnvio.setForeground(new java.awt.Color(102, 102, 102));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel7.setText("Tiempo Medio:");

        jTextFieldTiempoMedio.setEditable(false);
        jTextFieldTiempoMedio.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextFieldTiempoMedio.setForeground(new java.awt.Color(102, 102, 102));

        jLabel14.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel14.setText("COMIDAS");

        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/logominiEAT.png"))); // NOI18N

        jTableComidas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Título", "Precio", "Ingredientes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableComidas.setColumnSelectionAllowed(true);
        jTableComidas.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTableCargarComidas(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(jTableComidas);
        jTableComidas.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jButtonPagar.setText("Pagar");
        jButtonPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPagarActionPerformed(evt);
            }
        });

        jButtonAtras.setText("Atrás");
        jButtonAtras.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtrasActionPerformed(evt);
            }
        });

        jButtonAddToCart.setText("Añadir Carrito");
        jButtonAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddToCartActionPerformed(evt);
            }
        });

        jButtonDeleteFromCart.setText("Borrar del Carrito");
        jButtonDeleteFromCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteFromCartActionPerformed(evt);
            }
        });

        jTableCarrito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Título", "Precio", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCarrito.setColumnSelectionAllowed(true);
        jTableCarrito.getTableHeader().setReorderingAllowed(false);
        jTableCarrito.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableCarritoPropertyChange(evt);
            }
        });
        jScrollPane2.setViewportView(jTableCarrito);
        jTableCarrito.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel15.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel15.setText("CARRITO");

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel1.setText("Total:");

        jTextFieldTotal.setEditable(false);
        jTextFieldTotal.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jTextFieldTotal.setText("0.0");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel2.setText("Total con Gastos de Envío:");

        jTextFieldTotalConEnvio.setEditable(false);
        jTextFieldTotalConEnvio.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jTextFieldTotalConEnvio.setText("0.0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(241, 241, 241)
                                .addComponent(jLabelNombre))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jTextFieldTotalConEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jTextFieldTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(24, 24, 24)
                                    .addComponent(jButtonPagar)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel21))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel14)
                                            .addGap(72, 72, 72)
                                            .addComponent(jButtonAddToCart))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(164, 164, 164)
                                            .addComponent(jLabel15)
                                            .addGap(45, 45, 45)
                                            .addComponent(jButtonDeleteFromCart))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(18, 18, 18)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldGastosEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldTiempoMedio, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelNombre)
                    .addComponent(jButtonAtras))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldTiempoMedio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jTextFieldGastosEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(jButtonAddToCart))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonDeleteFromCart)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(jButtonPagar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextFieldTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldTotalConEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPagarActionPerformed
        // Confirmar de pago
        if (this.jTableCarrito.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No hay comidas en el carrito");
        } else {
            // Pedir confirmacion de pago
            int dialogResult = JOptionPane.showConfirmDialog(null, "¿Desea confirmar el pago?", "Confirmar", JOptionPane.YES_NO_OPTION);
            // si no se confirma el pago, no se hace nada
            if (dialogResult == JOptionPane.NO_OPTION) return;

            // se genera la factura
            generarFactura();
            // se almacena la venta
            almacenarVenta();
            // se muestra mensaje de confirmacion de pedido
            JOptionPane.showMessageDialog(null, "Pedido realizado con éxito");
            // volver a la pantalla de busqueda de restaurantes
            SearchRestaurant searchRestaurant = new SearchRestaurant();
            searchRestaurant.setVisible(true);
            this.setVisible(false);
        }
    }//GEN-LAST:event_jButtonPagarActionPerformed

    private void jButtonAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtrasActionPerformed
        SearchRestaurant searchRestaurant = new SearchRestaurant();
        searchRestaurant.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButtonAtrasActionPerformed

    private void jTableCargarComidas(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTableCargarComidas
        // cargar datos de las comidas del restaurante en la tabla
        for (Comida comida : this.restaurante.devolverComidas()) {
            // get model from table
            DefaultTableModel modelo = (DefaultTableModel) jTableComidas.getModel();
            // add row to the model
            modelo.addRow(new Object[]{comida.getId(), comida.getTitulo(), Double.valueOf(comida.getPrecio()) , comida.getIngredientes()});
        }
        // ocultar la columna id de ambas tablas
        jTableComidas.removeColumn(jTableComidas.getColumnModel().getColumn(0));
        jTableCarrito.removeColumn(jTableCarrito.getColumnModel().getColumn(0));
    }//GEN-LAST:event_jTableCargarComidas

    private void jButtonAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddToCartActionPerformed
        // recuperar fila
        int row = jTableComidas.getSelectedRow();
        // recuperar id de la comida
        String id = jTableComidas.getModel().getValueAt(row, 0).toString();
        // verificar si ya existe ese id en la tabla jCarrito
        for (int i = 0; i < jTableCarrito.getRowCount(); i++) {
            if (jTableCarrito.getModel().getValueAt(i, 0).toString().equals(id)) {
                JOptionPane.showMessageDialog(null, "Ya has añadido esta comida al carrito", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
        String titulo = jTableComidas.getModel().getValueAt(row, 1).toString();
        Double precio = (Double) jTableComidas.getModel().getValueAt(row, 2);
        // pasarlo a la tabla jCarrito
        DefaultTableModel modelo = (DefaultTableModel) jTableCarrito.getModel();
        modelo.addRow(new Object[]{id, titulo, precio, 1});
        actualizarTotalCarrito();
    }//GEN-LAST:event_jButtonAddToCartActionPerformed

    private void jButtonDeleteFromCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteFromCartActionPerformed
        // mostrar confirmación antes de borra la comida
        int dialogResult = JOptionPane.showConfirmDialog(null, "¿Estás seguro de que quieres eliminarlo del carrito?", "Warning", JOptionPane.YES_NO_OPTION);
        if (dialogResult == JOptionPane.NO_OPTION) return;
        // recuperar fila
        int row = jTableCarrito.getSelectedRow();
        // eliminar fila
        DefaultTableModel modelo = (DefaultTableModel) jTableCarrito.getModel();
        modelo.removeRow(row);
        actualizarTotalCarrito();
    }//GEN-LAST:event_jButtonDeleteFromCartActionPerformed

    private void jTableCarritoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableCarritoPropertyChange
        actualizarTotalCarrito();
    }//GEN-LAST:event_jTableCarritoPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cliente_comida_lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cliente_comida_lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cliente_comida_lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cliente_comida_lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cliente_comida_lista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddToCart;
    private javax.swing.JButton jButtonAtras;
    private javax.swing.JButton jButtonDeleteFromCart;
    private javax.swing.JButton jButtonPagar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelNombre;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableCarrito;
    private javax.swing.JTable jTableComidas;
    private javax.swing.JTextField jTextFieldGastosEnvio;
    private javax.swing.JTextField jTextFieldTiempoMedio;
    private javax.swing.JTextField jTextFieldTotal;
    private javax.swing.JTextField jTextFieldTotalConEnvio;
    // End of variables declaration//GEN-END:variables

    public void actualizarTotalCarrito() {
        double total = 0;
        for (int i = 0; i < jTableCarrito.getRowCount(); i++) {
            // Precio
            Double precio = (Double) jTableCarrito.getModel().getValueAt(i, 2);
            Integer cantidad = (Integer) jTableCarrito.getModel().getValueAt(i, 3);
            total += precio * cantidad;
            // redondear a 2 decimales
            total = Math.round(total * 100.0) / 100.0;
        }
        jTextFieldTotal.setText(String.valueOf(total));
        if (restaurante != null)
            jTextFieldTotalConEnvio.setText(String.valueOf(total + restaurante.getGastosEnvio()));
    }

    public void generarFactura() {
        try {
            // Obtener la fecha y hora actual
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
            String fecha = now.format(formatter);

            // Crear el archivo con nombre y la marca de tiempo
            FileWriter myWriter = new FileWriter("factura_"+ ((ClienteBase)Constantes.USUARIO_ACTUAL).getNombre() + "_" + fecha + ".txt");

            // Datos de la factura
            myWriter.write("=======================================================\n");
            myWriter.write("                 " + restaurante.getNombre() + "\n");
            myWriter.write("                 " + restaurante.getDireccion().getCalle() + ", " + restaurante.getDireccion().getNumero() + "\n");
            myWriter.write("                 " + restaurante.getDireccion().getCiudad() + ", " + restaurante.getDireccion().getCodigoPostal() + "\n");
            myWriter.write("                 CIF: " + restaurante.getCif() + "\n");
            myWriter.write("=======================================================\n");
            myWriter.write("Fecha de la venta: " + fecha + "\n\n");

            // Datos del cliente
            myWriter.write("Datos del cliente:\n");
            myWriter.write("Nombre: " + ((ClienteBase)Constantes.USUARIO_ACTUAL).getNombre() + "\n");
            myWriter.write("Dirección: " + ((ClienteBase)Constantes.USUARIO_ACTUAL).getDireccion() + "\n");
            myWriter.write("=======================================================\n");

            // Descripción de los productos
            myWriter.write("Descripción de los productos:\n\n");
            myWriter.write("Producto               Cantidad          Precio unit.          Total\n");
            myWriter.write("-------------------------------------------------------------------\n");

            // Detalles de los productos
            double total = 0;
            for (int i = 0; i < jTableCarrito.getRowCount(); i++) {
                String titulo = (String) jTableCarrito.getModel().getValueAt(i, 1);
                Double precio = (Double) jTableCarrito.getModel().getValueAt(i, 2);
                Integer cantidad = (Integer) jTableCarrito.getModel().getValueAt(i, 3);
                double subtotal = precio * cantidad;
                total += subtotal;

                myWriter.write(String.format("%-22s%-18d%-18.2f€%-18.2f€\n", titulo, cantidad, precio, subtotal));
            }

            // Total de la factura
            myWriter.write("-------------------------------------------------------------------\n");
            myWriter.write(String.format("%58s: %.2f€\n", "Total", total));
            // Gastos de envío
            double gastosEnvio = Double.parseDouble(jTextFieldGastosEnvio.getText());
            myWriter.write(String.format("%58s: %.2f€\n", "Gastos de envío", gastosEnvio));
            // Total con gastos de envío
            myWriter.write(String.format("%58s: %.2f€\n", "Total con gastos de envío", total + gastosEnvio));
            myWriter.write("=======================================================\n");
            myWriter.write("Gracias por su compra. ¡Esperamos verle pronto!\n\n");
            myWriter.write("Nota: Esta factura se genera automáticamente y no requiere firma.\n");

            myWriter.close();
            System.out.println("Se ha generado la factura.");
        } catch (IOException e) {
            System.out.println("Ha ocurrido un error.");
            e.printStackTrace();
        }
    }

    public void almacenarVenta() {
        // Crear la venta
        Venta venta = new Venta();

        // Obtener la fecha actual
        Date fechaActual = new Date();
        venta.setFechaVenta(fechaActual);
        // Obtener el cliente
        venta.setCliente((ClienteBase) Constantes.USUARIO_ACTUAL);
        // Obtener el restaurante
        venta.setRestaurante(restaurante);

        // Obtener las comidas vendidas
        ArrayList<VentaComida> ventaComidas = new ArrayList<>();
        // recorre las comidas de la tabla carrito
        for (int i = 0; i < jTableCarrito.getRowCount(); i++) {
            // crea una ventaComida
            VentaComida ventaComida = new VentaComida();

            // obtiene el id de la comida
            Comida comida = null;
            String idComida = jTableCarrito.getModel().getValueAt(i, 0).toString();
            // busca la comida en la lista de comidas del restaurante
            for (Comida c : restaurante.devolverComidas()) {
                if (c.getId().equals(idComida)) {
                    comida = c;
                    break;
                }
            }

            // obtiene la cantidad
            int cantidad = (int) jTableCarrito.getModel().getValueAt(i, 3);
            // asigna la comida y la cantidad a la ventaComida
            ventaComida.setComida(comida);
            ventaComida.setCantidad(cantidad);
            // añade la ventaComida a la lista de ventaComidas
            ventaComidas.add(ventaComida);
        }
        // Asignar las comidas vendidas a la venta
        venta.setComidas(ventaComidas);

        // Obtener la lista de ventas
        ArrayList<Venta> ventas = (ArrayList<Venta>) FileUtils.readFromFile(Constantes.PATH_SALES);
        // Añadir la venta a la lista
        ventas.add(venta);
        // Guardar la lista de ventas
        FileUtils.writeToFile(Constantes.PATH_SALES, ventas);
    }
}
